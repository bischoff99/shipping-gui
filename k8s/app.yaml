apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping-gui-app
  namespace: shipping-gui
  labels:
    app: shipping-gui
    component: app
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: shipping-gui
      component: app
  template:
    metadata:
      labels:
        app: shipping-gui
        component: app
    spec:
      containers:
      - name: shipping-gui
        image: shipping-gui:latest
        ports:
        - containerPort: 5000
          name: http
        env:
        # ConfigMap values
        - name: FLASK_ENV
          valueFrom:
            configMapKeyRef:
              name: shipping-gui-config
              key: FLASK_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: shipping-gui-config
              key: LOG_LEVEL
        - name: LOG_TO_STDOUT
          valueFrom:
            configMapKeyRef:
              name: shipping-gui-config
              key: LOG_TO_STDOUT
        - name: GUNICORN_WORKERS
          valueFrom:
            configMapKeyRef:
              name: shipping-gui-config
              key: GUNICORN_WORKERS
        - name: METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: shipping-gui-config
              key: METRICS_ENABLED
        # Secret values
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: shipping-gui-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: shipping-gui-secrets
              key: REDIS_URL
        - name: FLASK_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: shipping-gui-secrets
              key: FLASK_SECRET_KEY
        - name: VEEQO_API_KEY
          valueFrom:
            secretKeyRef:
              name: shipping-gui-secrets
              key: VEEQO_API_KEY
        - name: EASYSHIP_API_KEY
          valueFrom:
            secretKeyRef:
              name: shipping-gui-secrets
              key: EASYSHIP_API_KEY
        - name: HF_TOKEN
          valueFrom:
            secretKeyRef:
              name: shipping-gui-secrets
              key: HF_TOKEN
        - name: INTERNAL_API_KEY
          valueFrom:
            secretKeyRef:
              name: shipping-gui-secrets
              key: INTERNAL_API_KEY
        - name: CLIENT_API_KEYS
          valueFrom:
            secretKeyRef:
              name: shipping-gui-secrets
              key: CLIENT_API_KEYS
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 5000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: app-uploads
          mountPath: /app/uploads
      volumes:
      - name: app-logs
        emptyDir: {}
      - name: app-uploads
        emptyDir: {}
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: shipping-gui-service
  namespace: shipping-gui
  labels:
    app: shipping-gui
    component: app
spec:
  selector:
    app: shipping-gui
    component: app
  ports:
  - port: 80
    targetPort: 5000
    name: http
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: shipping-gui-ingress
  namespace: shipping-gui
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - shipping-gui.example.com
    secretName: shipping-gui-tls
  rules:
  - host: shipping-gui.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: shipping-gui-service
            port:
              number: 80