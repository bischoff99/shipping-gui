#!/usr/bin/env python3
"""
MCP Debug Helper Utility

This utility provides enhanced debugging capabilities using the python-debug MCP server.
It integrates mcp-pdb for interactive debugging of SHIPPING_GUI components.
"""

import os
import sys
import argparse
import subprocess
import json
from pathlib import Path
from typing import Optional, List, Dict, Any

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


class MCPDebugHelper:
    """Helper class for MCP-enhanced debugging"""
    
    def __init__(self):
        self.project_root = project_root
        self.debug_sessions = []
    
    def check_mcp_availability(self) -> bool:
        """Check if MCP python-debug server is available"""
        try:
            result = subprocess.run(
                ["claude", "mcp", "list"],
                capture_output=True,
                text=True,
                timeout=10
            )
            return "python-debug" in result.stdout and "✓" in result.stdout
        except (subprocess.TimeoutExpired, FileNotFoundError):
            return False
    
    def list_debuggable_files(self) -> List[str]:
        """List Python files that can be debugged"""
        debuggable_files = []
        
        # Core application files
        core_files = [
            "app.py",
            "routing.py", 
            "validation.py",
            "utils.py",
            "fedex_orders.py",
            "veeqo_orders.py"
        ]
        
        for file in core_files:
            if (self.project_root / file).exists():
                debuggable_files.append(file)
        
        # API integration files
        api_dir = self.project_root / "api"
        if api_dir.exists():
            for api_file in api_dir.glob("*.py"):
                if api_file.name != "__init__.py":
                    debuggable_files.append(f"api/{api_file.name}")
        
        # Service files
        services_dir = self.project_root / "services"
        if services_dir.exists():
            for service_file in services_dir.glob("*.py"):
                if service_file.name != "__init__.py":
                    debuggable_files.append(f"services/{service_file.name}")
        
        return debuggable_files
    
    def create_debug_script(self, target_file: str, function_name: Optional[str] = None) -> str:
        """Create a debug script for a specific file/function"""
        debug_script_content = f'''#!/usr/bin/env python3
"""
Auto-generated debug script for {target_file}
Generated by MCP Debug Helper
"""

import sys
import os
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    # Import the target module
    import {target_file.replace('.py', '').replace('/', '.')}
    
    print(f"Successfully imported {target_file}")
    
    # Set up debugging context
    debug_context = {{
        "module": {target_file.replace('.py', '').replace('/', '.')},
        "file": "{target_file}",
        "project_root": str(project_root)
    }}
    
    print("Debug context:", debug_context)
    
    # Breakpoint for interactive debugging
    breakpoint()  # This will be caught by mcp-pdb
    
except ImportError as e:
    print(f"Error importing {target_file}: {{e}}")
    sys.exit(1)
except Exception as e:
    print(f"Error in debug script: {{e}}")
    # Breakpoint for error debugging
    breakpoint()
    sys.exit(1)
'''
        
        debug_script_path = self.project_root / "temp" / f"debug_{target_file.replace('/', '_').replace('.py', '')}.py"
        debug_script_path.parent.mkdir(exist_ok=True)
        
        with open(debug_script_path, 'w') as f:
            f.write(debug_script_content)
        
        # Make executable
        os.chmod(debug_script_path, 0o755)
        
        return str(debug_script_path)
    
    def start_debug_session(self, target_file: str, function_name: Optional[str] = None, 
                          breakpoint_line: Optional[int] = None) -> Dict[str, Any]:
        """Start an interactive debug session"""
        if not self.check_mcp_availability():
            return {
                "error": "MCP python-debug server not available. Please check 'claude mcp list'"
            }
        
        # Create debug script
        debug_script = self.create_debug_script(target_file, function_name)
        
        print(f"🔧 Starting MCP debug session for {target_file}")
        print(f"📄 Debug script: {debug_script}")
        
        if breakpoint_line:
            print(f"🔍 Breakpoint at line: {breakpoint_line}")
        
        try:
            # Start the debug session with mcp-pdb
            cmd = ["python", "-m", "mcp_pdb", debug_script]
            
            print(f"🚀 Running: {' '.join(cmd)}")
            print("=" * 50)
            print("MCP Debug Session Started")
            print("Available commands: l(ist), n(ext), s(tep), c(ontinue), p <var>, pp <var>, q(uit)")
            print("=" * 50)
            
            # Run interactively
            subprocess.run(cmd, cwd=self.project_root)
            
            return {"status": "debug_session_completed", "script": debug_script}
            
        except KeyboardInterrupt:
            print("\n🛑 Debug session interrupted by user")
            return {"status": "interrupted", "script": debug_script}
        except Exception as e:
            return {"error": f"Debug session failed: {e}", "script": debug_script}
    
    def debug_api_call(self, api_name: str, method_name: str) -> Dict[str, Any]:
        """Debug a specific API call"""
        api_files = {
            "veeqo": "api/veeqo_api.py",
            "easyship": "api/easyship_api.py"
        }
        
        if api_name.lower() not in api_files:
            return {"error": f"Unknown API: {api_name}. Available: {list(api_files.keys())}"}
        
        target_file = api_files[api_name.lower()]
        
        print(f"🔧 Debugging {api_name} API - {method_name} method")
        return self.start_debug_session(target_file, method_name)
    
    def debug_order_workflow(self, step: str = "full") -> Dict[str, Any]:
        """Debug the order processing workflow"""
        workflow_files = {
            "parsing": "utils.py",
            "validation": "validation.py", 
            "routing": "routing.py",
            "full": "app.py"
        }
        
        if step not in workflow_files:
            return {"error": f"Unknown workflow step: {step}. Available: {list(workflow_files.keys())}"}
        
        target_file = workflow_files[step]
        
        print(f"🔧 Debugging order workflow - {step} step")
        return self.start_debug_session(target_file)
    
    def create_test_debug_session(self, test_file: str) -> Dict[str, Any]:
        """Create a debug session for a specific test"""
        test_path = self.project_root / "tests" / test_file
        if not test_path.exists():
            return {"error": f"Test file not found: {test_file}"}
        
        print(f"🔧 Debugging test: {test_file}")
        return self.start_debug_session(f"tests/{test_file}")


def main():
    """Main CLI interface"""
    parser = argparse.ArgumentParser(description="MCP Debug Helper for SHIPPING_GUI")
    parser.add_argument("--list", "-l", action="store_true", help="List debuggable files")
    parser.add_argument("--file", "-f", help="Debug a specific file")
    parser.add_argument("--function", help="Specific function to debug")
    parser.add_argument("--breakpoint", "-b", type=int, help="Line number for breakpoint")
    parser.add_argument("--api", help="Debug API (veeqo/easyship)")
    parser.add_argument("--method", help="API method to debug")
    parser.add_argument("--workflow", "-w", help="Debug workflow step (parsing/validation/routing/full)")
    parser.add_argument("--test", "-t", help="Debug a specific test file")
    parser.add_argument("--check", action="store_true", help="Check MCP availability")
    
    args = parser.parse_args()
    
    helper = MCPDebugHelper()
    
    if args.check:
        if helper.check_mcp_availability():
            print("✅ MCP python-debug server is available")
        else:
            print("❌ MCP python-debug server is not available")
            print("   Run 'claude mcp list' to check MCP server status")
        return
    
    if args.list:
        files = helper.list_debuggable_files()
        print("📋 Debuggable files:")
        for file in files:
            print(f"  • {file}")
        return
    
    if args.api:
        result = helper.debug_api_call(args.api, args.method or "get_products")
        if "error" in result:
            print(f"❌ {result['error']}")
        return
    
    if args.workflow:
        result = helper.debug_order_workflow(args.workflow)
        if "error" in result:
            print(f"❌ {result['error']}")
        return
    
    if args.test:
        result = helper.create_test_debug_session(args.test)
        if "error" in result:
            print(f"❌ {result['error']}")
        return
    
    if args.file:
        result = helper.start_debug_session(args.file, args.function, args.breakpoint)
        if "error" in result:
            print(f"❌ {result['error']}")
        else:
            print(f"✅ Debug session completed")
        return
    
    # Interactive mode
    print("🔧 MCP Debug Helper - Interactive Mode")
    print("=" * 40)
    
    if not helper.check_mcp_availability():
        print("❌ MCP python-debug server not available")
        print("   Please check 'claude mcp list' and ensure mcp-pdb is connected")
        return
    
    files = helper.list_debuggable_files()
    print("Available files to debug:")
    for i, file in enumerate(files, 1):
        print(f"  {i}. {file}")
    
    try:
        choice = input("\nEnter file number (or 'q' to quit): ").strip()
        if choice.lower() == 'q':
            return
        
        file_index = int(choice) - 1
        if 0 <= file_index < len(files):
            target_file = files[file_index]
            result = helper.start_debug_session(target_file)
            if "error" in result:
                print(f"❌ {result['error']}")
        else:
            print("❌ Invalid file number")
    
    except (ValueError, KeyboardInterrupt):
        print("\n👋 Goodbye!")


if __name__ == "__main__":
    main()